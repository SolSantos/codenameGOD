event_manager = require "main.event_manager"
persistence = require "main.persistence"
game_state = require "main.game_state"
items = require "main.game.item.items"
local hints = require "main.hints"

function init(self)
	msg.post(".", "acquire_input_focus")
	self.current_map = "menu"
	self.current_factory = collectionfactory.create("#factory_menu")
	math.randomseed(os.time())
	self.is_game_stopped = false
end

function on_input(self, action_id, action)
	if action_id == hash("click") then
		if action.pressed then
			msg.post("/sound#1-mouse_click", "play_sound", {gain = 0.025})
		end
	end
end

function update(self, dt)
	event_manager:update(dt)
end

function on_message(self, message_id, message, sender)
	if message_id == hash("load_screen") then
		event_manager:clear_events()
		
		if self.current_factory ~= nil then
			go.delete(self.current_factory)
		end

		self.current_map = message.name
		self.current_factory = collectionfactory.create("#factory_"..message.name)
		if message.pos then
			go.set_position(message.pos, "/randall")
		end

		if message.rot then
			go.set_rotation(message.rot, "/randall")
		end
		msg.post("/item_manager", "changed_scenario", {name=message.name})
		msg.post("/inventory#inventory", "inv_close")
		msg.post("/balloon", "hide")
	end

	if message_id == hash("stop_game") or message_id == hash("restart_game") then
		msg.post("/item_manager", message_id)
		msg.post("/clickable_area_manager", message_id)
		msg.post("/cursor", message_id)
		if message_id == hash("stop_game") then
			self.is_game_stopped = true
			hints.stop()
		else
			self.is_game_stopped = false
			hints.restart()
		end
	end

	if message_id == hash("send_collection") then
		msg.post(self.current_factory[hash("/main")], message.name, message.params or {})
	end

	if message_id == hash("checkpoint") then
		local pos = go.get_position("/randall")
		game_state.data.randall_pos = {x=pos.x, y=pos.y}
		game_state.data.current_map = self.current_map
		
		persistence.save_table("state.save", game_state.data)
		persistence.save_table("items.save", items.data)
	end	
end