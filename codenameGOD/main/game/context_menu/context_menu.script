local inside_gameobject = require("main.inside_gameobject")
local context_data = require("main.context_data")

local ORIENTATION = {
	UP    = 1,
	DOWN  = -1,
	LEFT  = -1,
	RIGHT = 1
}

function init(self)
	msg.post(".", "acquire_input_focus")
	self.line_factory = "/context_menu#context_line"
	self.line_width = 90
	self.line_height = 29.5

	self.click_elapsed = 0
	--[[
		Minimum time interval between closing and opening again.
		used to prevent opening acidentally the menu after
		clicking one of the lines over the attached item.
	]]
	self.min_interval = 0.05

	self.mouse_x = 0
	self.mouse_y = 0

	-- Object to which the menu is attached to
	self.attached_to = nil
	self.menu = {}

	self.enabled = true
end

function get_sprite_url(obj)
	local url = msg.url(obj)
	url.fragment = "sprite"
	return url
end

local function clear_context_menu(self)
	for i = #self.menu, 1, -1 do
		go.delete(self.menu[i].item)
		table.remove(self.menu, i)
	end
	self.attached_to = nil
end

local function clear_highlight(self)
	for _, line in ipairs(self.menu) do
		local line_url = get_sprite_url(line.item)
		go.set(line_url, "tint", vmath.vector4(0.7, 0.7, 0.7, 1))
	end
end

local function get_hovered_line(self)
	for _, line in ipairs(self.menu) do
		local line_url = get_sprite_url(line.item)
		if inside_gameobject(line_url, self.mouse_x, self.mouse_y) then
			return line
		end
	end
	return nil
end

local function get_orientation(self, x, y)
	local v_orientation = ORIENTATION.UP
	local h_orientation = ORIENTATION.RIGHT
	
	local w, h = window.get_size() 
	
	-- The coordinates received internaly are still of the base resolution
	-- but the window size we received is the scaled size so we need to 
	-- adapt the other coordinates to match the scale
	local scale = vmath.vector3(w / 1024, h / 576, 1)
	
	h = h - 65 -- Discount height for the top application bar on desktop
	if x * scale.x + (self.line_width * scale.x) > w then
		h_orientation = ORIENTATION.LEFT
	end
	if y * scale.y + (self.line_height * scale.y) * #self.menu > h then
		v_orientation = ORIENTATION.DOWN
	end
	
	return h_orientation, v_orientation
end

function final(self)
	clear_context_menu(self)
end

function update(self, dt)
	self.click_elapsed = self.click_elapsed + dt

	clear_highlight(self)
	local hovered_line = get_hovered_line(self)
	if hovered_line then
		local line_url = get_sprite_url(hovered_line.item)
		go.set(line_url, "tint", vmath.vector4(1, 1, 1, 1))

		if hovered_line ~= self.last_hovered then
			msg.post("/sound#context_hover_line", "play_sound", {gain = 0.04})
		end
	end
	self.last_hovered = hovered_line
end

function on_message(self, message_id, message, sender)
	if message_id == hash("enable_context_menu") then
		self.enabled = true
	end
	
	if message_id == hash("disable_context_menu") then
		self.enabled = false
	end

	if self.enabled and message_id == hash("display_context_menu") then
		if self.click_elapsed < self.min_interval then
			return
		end

		if self.attached_to == message.area_url then
			return
		end

		local entries = context_data[message.context_key]
		if not entries then
			print("The element "..message.context_key.." does not have any context entries")
			return
		end

		if #entries == 0 then
			return
		end
		msg.post("/collections", "send_collection", {name="moved"})
		
		clear_context_menu(self)
		local h_orientation, v_orientation = get_orientation(self, message.x, message.y)
		
		for i, entry in ipairs(entries) do
			local line_x = message.x + (self.line_width / 2 * h_orientation)
			local line_y = message.y + (self.line_height / 2 * v_orientation)
			local y_offset = ((i-1) * self.line_height) * v_orientation
			local pos = vmath.vector3(line_x, line_y, 1)
			local new_item = factory.create(self.line_factory, pos , nil, {})
			local url = msg.url(new_item)
			go.set(url, "scale.y", 0.2)
			go.animate(url, "scale.y", go.PLAYBACK_ONCE_FORWARD, 1, go.EASING_LINEAR, 0.08)
			go.animate(url, "position.y", go.PLAYBACK_ONCE_FORWARD, line_y + y_offset, go.EASING_LINEAR, i * 0.08)
			url.fragment = "label"
			label.set_text(url, entry.text)
			table.insert(self.menu, {item=new_item, click=entry.click})
		end
		self.attached_to = message.area_url
	end
end

function on_input(self, action_id, action)
	self.mouse_x = action.x
	self.mouse_y = action.y

	if action_id == hash("click") and action.pressed then
		local hovered_line = get_hovered_line(self)
		if not hovered_line then
			if self.attached_to then
				local attached_url = get_sprite_url(self.attached_to)
				local inside_attached = inside_gameobject(
					attached_url, self.mouse_x, self.mouse_y
				)
				if not inside_attached then
					clear_context_menu(self)
				end
			end
			return
		end

		if type(hovered_line.click) == "string" then
			msg.post("/balloon", "show_text", {text=hovered_line.click or "No Text Here Yet!", character="/randall"})
		elseif type(hovered_line.click) == "function" then
			hovered_line.click(self.mouse_x, self.mouse_y)
		else
			print("Not supported type for the context click")
			pprint(hovered_line.click)
		end
		msg.post("/collections", "send_collection", {name="moved"})
		clear_context_menu(self)
		self.click_elapsed = 0
	end
end
