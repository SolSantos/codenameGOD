local inside_gameobject = require("main.inside_gameobject")
local utils = require("main.utils")
local balloon_utils = require("main.game.dialogue.utils")

local BALLOON_SPACE_X = 476
local BALLOON_SPACE_Y = 180

local LINE_HEIGHT = 20 -- pixels

local LETTERS_PER_SECOND = 20
local SMALL_BALLOON_SPACE = 30 -- letters
local SMALL_BALLOON_MAX_LINES = 3
local MIDDLE_BALLOON_SPACE = 39 -- letters
local MIDDLE_BALLOON_MAX_LINES = 4
local BIG_BALLOON_SPACE = 49

local ORIENTATION = {UP=1, DOWN=-1, LEFT=-1, RIGHT=1}
local BIG_BALLOON = 1
local MIDDLE_BALLOON = 2
local SMALL_BALLOON = 3
local NO_ARROW_BIG_BALLOON = 4
local NO_ARROW_MIDDLE_BALLOON = 5
local NO_ARROW_SMALL_BALLOON = 6
local BALLOONS = {
	[BIG_BALLOON]={
		width=476,
		height=176,
		image="balloon1",
		offset=vmath.vector3(-30, 60, 0)
	},
	[MIDDLE_BALLOON]={
		width=356,
		height=128,
		image="balloon2",
		offset=vmath.vector3(0, 30, 0)
	},
	[SMALL_BALLOON]={
		width=296,
		height=128,
		image="balloon3",
		offset=vmath.vector3(20, 15, 0)
	},
	[NO_ARROW_BIG_BALLOON]={
		width=476,
		height=176,
		image="balloon4",
		offset=vmath.vector3(-30, 60, 0)
	},
	[NO_ARROW_MIDDLE_BALLOON]={
		width=356,
		height=128,
		image="balloon5",
		offset=vmath.vector3(0, 30, 0)
	},
	[NO_ARROW_SMALL_BALLOON]={
		width=296,
		height=128,
		image="balloon6",
		offset=vmath.vector3(20, 15, 0)
	}
}

local LETTER_WIDTH = {
	a=9,
	b=9,
	c=9,
	d=9,
	e=9,
	f=9,
	g=9,
	h=9,
	i=7,
	j=9,
	k=9,
	l=9,
	m=12,
	n=9,
	o=9,
	p=9,
	q=9,
	r=9,
	s=9,
	t=9,
	u=9,
	v=9,
	w=12,
	x=9,
	y=9,
	z=9,
	A=9,
	B=9,
	C=9,
	D=9,
	E=9,
	F=9,
	G=9,
	H=9,
	I=7,
	J=9,
	K=9,
	L=9,
	M=12,
	N=9,
	O=9,
	P=9,
	Q=9,
	R=9,
	S=9,
	T=9,
	U=9,
	V=9,
	W=12,
	X=9,
	Y=9,
	Z=9,
	["0"]=9,
	["1"]=7,
	["2"]=9,
	["3"]=9,
	["4"]=9,
	["5"]=9,
	["6"]=9,
	["7"]=9,
	["8"]=9,
	["9"]=9,
	[" "]=5,
	["'"]=5,
	[","]=5,
	["."]=4,
	["!"]=4,
	["-"]=8,
	["?"]=9
}

local WAVE_HEIGHT = 4

local get_visible_text = function(text, elapsed)
	local visible_count = math.min(text:len(), elapsed * LETTERS_PER_SECOND)
	return text:sub(0, visible_count)
end

-- When text is being displayed letter by letter and reaches the end of the line,
-- the word in the limit jumps to the next line. This function adds line breaks
-- before the words in the limit, so they pass to the next line, staying in their
-- positions and improving readability.
local function break_limit_words(text, balloon_space)
	local final_text = ""
	local line_letters = 0
	local word = ""
	local last_separator = "" -- No separator for the first word
	text = text.." "  -- This extra space will be ignored
	for letter in text:gmatch(".") do
		local word_ended = false
		local word_fit = (line_letters + #word + 1) <= balloon_space
		if letter == " " or letter == "\n" then
			word_ended = true
		else
			word = word..letter
		end

		if word_ended then
			local word_fit = (line_letters + #word + 1) <= balloon_space
			if last_separator == " " and not word_fit then
				last_separator = "\n"
			end

			final_text = final_text..last_separator..word
			if last_separator == " " then
				line_letters = line_letters + #word + 1
			else
				line_letters = #word
			end
			
			last_separator = letter
			word = ""
		end
	end
	return final_text
end

local function get_balloon_to_use(text)
	local small_lines = 0
	local middle_lines = 0
	for line in text:gmatch("[^\n]+") do
		small_lines = small_lines + math.ceil(line:len() / SMALL_BALLOON_SPACE)
		middle_lines = middle_lines + math.ceil(line:len() / MIDDLE_BALLOON_SPACE)
	end

	if small_lines <= SMALL_BALLOON_MAX_LINES then
		return SMALL_BALLOON
	end

	if middle_lines <= MIDDLE_BALLOON_MAX_LINES then
		return MIDDLE_BALLOON
	end

	return BIG_BALLOON
end

function init(self)
	msg.post(".","acquire_input_focus")

	self.label = msg.url("#label")
	self.label_big = msg.url("#label_big")
	self.label_inverted = msg.url("#label_inverted")
	self.label_inverted_big = msg.url("#label_inverted_big")
	self.middle_label = msg.url("#middle_label")
	self.middle_label_big = msg.url("#middle_label_big")
	self.middle_label_inverted = msg.url("#middle_label_inverted")
	self.middle_label_inverted_big = msg.url("#middle_label_inverted_big")	
	self.big_label = msg.url("#big_label")
	self.big_label_big = msg.url("#big_label_big")

	self.use_big_labels = false
	self.h_orientation = ORIENTATION.RIGHT

	self.skip = msg.url("#skip")
	self.skip_inverted = msg.url("#skip_inverted")
	self.middle_skip = msg.url("#middle_skip")
	self.middle_skip_inverted = msg.url("#middle_skip_inverted")	
	self.big_skip = msg.url("#big_skip")

	self.current_label = self.label
	self.current_skip = self.skip

	self.can_skip = false
	self.balloon_text = nil
	self.show_elapsed = 0
	self.last_message_id = 0
	self.current_balloon = SMALL_BALLOON
	self.current_character = nil
	self.balloon_visible = false
	self.skip_offset = {
		[self.skip]                 = vmath.vector3(34,  25,  0),
		[self.skip_inverted]        = vmath.vector3(210, 20,  0),
		[self.middle_skip]          = vmath.vector3(96,  -2,  0),
		[self.middle_skip_inverted] = vmath.vector3(213, -2,  0),
		[self.big_skip]             = vmath.vector3(216, -28, 0)
	}

	self.label_offset = {
		[self.label]                     = vmath.vector3(-222, 78, 0),
		[self.label_big]                 = vmath.vector3(-222, 78, 0),
		[self.label_inverted]            = vmath.vector3(-43,  78, 0),
		[self.label_inverted_big]        = vmath.vector3(-43,  78, 0),
		[self.middle_label]              = vmath.vector3(-222, 78, 0),
		[self.middle_label_big]          = vmath.vector3(-222, 78, 0),
		[self.middle_label_inverted]     = vmath.vector3(-104, 78, 0),
		[self.middle_label_inverted_big] = vmath.vector3(-104, 78, 0),
		[self.big_label]                 = vmath.vector3(-215, 74, 0),
		[self.big_label_big]             = vmath.vector3(-215, 74, 0),
	}

	local _, _, w, h = defos.get_view_size()
	self.current_resolution = {w=w, h=h}

	self.effect_areas = {}
	self.effect_progress = 0
	
	msg.post(".", "disable")
end

local function show_text_effects(self)
	local w, h = window.get_size()
	local scale = vmath.vector4(w / WIDTH, h / HEIGHT, w / WIDTH, h / HEIGHT)
	local use_gradient = {0,0,0,0}
	local wave_effect  = {0,0,0,0}
	local float_effect = {0,0,0,0}
	local shake_effect = {0,0,0,0}
	for i=1, 3 do
		local area = self.effect_areas[i]
		if area then
			local rect = area.rect
			go.set(self.current_label, "area_scale", scale)
			go.set(self.current_label, "area"..i, rect)
			if area.color and area.to_color then
				go.set(self.current_label, "color"..i, area.color)
				go.set(self.current_label, "to_color"..i, area.to_color)
				use_gradient[i] = 1
			else
				go.set(self.current_label, "color"..i, area.color)
			end

			if area.wave_effect then
				wave_effect[i] = 1
			end
			if area.float_effect then
				float_effect[i] = 1
			end
			if area.shake_effect then
				shake_effect[i] = 1
			end
		else
			go.set(self.current_label, "area"..i, vmath.vector4())
			go.set(self.current_label, "color"..i, vmath.vector4(1,1,1,1))
		end
	end
	go.set(self.current_label, "use_gradient", vmath.vector4(unpack(use_gradient)))
	go.set(self.current_label, "wave_effect", vmath.vector4(unpack(wave_effect)))
	go.set(self.current_label, "float_effect", vmath.vector4(unpack(float_effect)))
	go.set(self.current_label, "shake_effect", vmath.vector4(unpack(shake_effect)))
end

function update(self, dt)
	self.effect_progress = (self.effect_progress + dt) % 1
	go.set(self.current_label, "effect_progress", vmath.vector4(self.effect_progress, math.random() * 2 - 1, math.random() * 2 - 1, 0))
	
	local _, _, w, h = defos.get_view_size()
	
	self.use_big_labels = w > 1300
	local new_label = get_balloon_label(self)
	if new_label ~= self.current_label then
		disable_labels(self)
		self.current_label = new_label
		msg.post(self.current_label, "enable")
		label.set_text(self.current_label, "")
	end

	if self.current_resolution.w ~= w or self.current_resolution.h ~= h then
		self.current_resolution.w, self.current_resolution.h = w, h
		show_text_effects(self)
	end
	
	if self.balloon_text then
		self.show_elapsed = utils.clamp(self.show_elapsed + dt, 0, self.balloon_text:len() / LETTERS_PER_SECOND)
		local visible_text = get_visible_text(self.balloon_text, self.show_elapsed)
		label.set_text(self.current_label, visible_text)
	end
end

local function hide_balloon(self)
	self.balloon_text = nil
	label.set_text(self.label, "")
	label.set_text(self.big_label, "")
	msg.post(".", "disable")
	self.current_character = nil
	self.balloon_visible = false
end

function get_balloon_label(self)
	if self.current_balloon == SMALL_BALLOON or self.current_balloon == NO_ARROW_SMALL_BALLOON then
		if self.h_orientation == ORIENTATION.RIGHT then
			if self.use_big_labels then
				return self.label_big
			else
				return self.label
			end
		else
			if self.use_big_labels then
				return self.label_inverted_big
			else
				return self.label_inverted
			end
		end
	elseif self.current_balloon == BIG_BALLOON or self.current_balloon == NO_ARROW_BIG_BALLOON then
		if self.use_big_labels then
			return self.big_label_big
		else
			return self.big_label
		end
	else
		if self.h_orientation == ORIENTATION.RIGHT then
			if self.use_big_labels then
				return self.middle_label_big
			else
				return self.middle_label
			end
		else
			if self.use_big_labels then
				return self.middle_label_inverted_big
			else
				return self.middle_label_inverted
			end
		end
	end
end

function get_balloon_skip(self)
	if self.current_balloon == SMALL_BALLOON or self.current_balloon == NO_ARROW_SMALL_BALLOON then
		if self.h_orientation == ORIENTATION.RIGHT then
			return self.skip
		else
			return self.skip_inverted
		end
	elseif self.current_balloon == BIG_BALLOON or self.current_balloon == NO_ARROW_BIG_BALLOON then
		return self.big_skip
	else
		if self.h_orientation == ORIENTATION.RIGHT then
			return self.middle_skip
		else
			return self.middle_skip_inverted
		end
	end
end

function disable_skips(self)
	msg.post(self.skip, "disable")
	msg.post(self.skip_inverted, "disable")
	msg.post(self.middle_skip, "disable")
	msg.post(self.middle_skip_inverted, "disable")	
	msg.post(self.big_skip, "disable")
end

function disable_labels(self)
	msg.post(self.label, "disable")
	msg.post(self.label_inverted, "disable")
	msg.post(self.middle_label, "disable")
	msg.post(self.middle_label_inverted, "disable")	
	msg.post(self.big_label, "disable")
	
	msg.post(self.label_big, "disable")
	msg.post(self.label_inverted_big, "disable")
	msg.post(self.middle_label_big, "disable")
	msg.post(self.middle_label_inverted_big, "disable")	
	msg.post(self.big_label_big, "disable")
end

local function set_active_elements(self)
	-- Set active label
	disable_labels(self)	
	self.current_label = get_balloon_label(self)
	msg.post(self.current_label, "enable")
	label.set_text(self.current_label, "")

	-- Set active skip button
	disable_skips(self)
	self.current_skip = get_balloon_skip(self)
	if self.can_skip then
		msg.post(self.current_skip, "enable")
	end
end

local function get_orientation(pos, balloon)
	local balloon_right = pos.x + balloon.width + balloon.offset.x 
	local balloon_top = pos.y + balloon.height + balloon.offset.y

	local w, h = window.get_size()
	
	-- The coordinates received internaly are still of the base resolution
	-- but the window size we received is the scaled size so we need to 
	-- adapt the other coordinates to match the scale
	local scale = vmath.vector3(w / WIDTH, h / HEIGHT, 1)
	
	local h_orientation = ORIENTATION.RIGHT
	if balloon_right * scale.x >= w then
		h_orientation = ORIENTATION.LEFT
	end

	local v_orientation = ORIENTATION.UP
	if balloon_top * scale.y >= h then
		v_orientation = ORIENTATION.DOWN
	end

	-- NOTE: For now we don't have balloons touching the top so we are ignoring the y flip
	return h_orientation, ORIENTATION.UP--v_orientation
end

local function register_effect_area(self, effect, x, y, width, height)
	if #self.effect_areas > 3 then
		print("The effects in the text balloon exceeded the max supported areas (3).")
		return
	end
	if width == 0 then return end
	
	local rect = vmath.vector4(x, y, width, height)
	if effect.wave_effect then
		rect.y = rect.y - WAVE_HEIGHT / 2
		rect.w = rect.w + WAVE_HEIGHT / 2
	end

	table.insert(self.effect_areas, {
		rect=rect,
		color=effect.color, 
		to_color=effect.to_color,
		wave_effect=effect.wave_effect,
		float_effect=effect.float_effect,
		shake_effect=effect.shake_effect
	})
end

local function setup_text_effects(self, effects, ballon_pos)
	local label_pos = ballon_pos + self.label_offset[self.current_label]
	self.effect_areas = {}
	for _, effect in ipairs(effects) do
		local before_offset = 0
		local highlight_width = 0
		local line = 1
		local i = 0
		for letter in self.balloon_text:gmatch(".") do
			if letter == "\n" then
				local x = label_pos.x + before_offset
				local y = label_pos.y - (LINE_HEIGHT * line)
				register_effect_area(self, effect, x, y, highlight_width, LINE_HEIGHT)
					
				-- pass to next line
				before_offset = 0
				highlight_width = 0
				line = line + 1
			else
				i = i + 1  -- \n do not count because they are added by the autowrap code
				if i < effect.from then
					before_offset = before_offset + LETTER_WIDTH[letter]
				elseif i >= effect.from and i <= effect.to then
					highlight_width = highlight_width + LETTER_WIDTH[letter]
				else
					break
				end
			end
		end
		local x = label_pos.x + before_offset
		local y = label_pos.y - (LINE_HEIGHT * line)
		register_effect_area(self, effect, x, y, highlight_width, LINE_HEIGHT)
	end
	
	show_text_effects(self)
end

local function show_balloon(self, character, raw_text, user_pos, no_arrow, allow_skip, effects)
	local text = break_limit_words(raw_text, SMALL_BALLOON_SPACE) or ""

	local pos = user_pos or go.get_position(character)
	local balloon_id = get_balloon_to_use(text)
	if balloon_id == MIDDLE_BALLOON then 
		text = break_limit_words(raw_text, MIDDLE_BALLOON_SPACE) or ""
	elseif balloon_id == BIG_BALLOON then
		text = break_limit_words(raw_text, BIG_BALLOON_SPACE) or ""
	end

	if no_arrow then
		balloon_id = balloon_id + 3
	end
	local balloon = BALLOONS[balloon_id]
	self.current_balloon = balloon_id
	self.current_character = msg.url(character)

	local h_orientation, v_orientation = get_orientation(pos, balloon)
	sprite.set_hflip("#sprite", h_orientation == ORIENTATION.LEFT)
	sprite.set_vflip("#sprite", v_orientation == ORIENTATION.DOWN)
	self.h_orientation = h_orientation
	
	pos.x = pos.x + (BALLOON_SPACE_X / 2 + balloon.offset.x) * h_orientation
	pos.y = pos.y + balloon.offset.y-- + (offset_y * v_orientation)
	pos.z = 0.9
	
	go.set_position(pos, ".")
	msg.post("#sprite", "play_animation", {id = hash(balloon.image)})

	self.balloon_text = text
	self.show_elapsed = 0

	msg.post(".", "enable")
	self.balloon_visible = true
	self.can_skip = allow_skip or false
	set_active_elements(self)
	label.set_text(self.current_label, "")

	setup_text_effects(self, effects, pos)
end

local function balloon_play_sound(self, sound)
	local sound_url = "/balloon"..sound
	msg.post(sound_url, "play_sound")

	-- Stop old sound after 0.5s so it doesnt sound so weird when skipping dialog
	local current_sound = self.last_sound
	timer.delay(0.5, false, function()
		if current_sound and current_sound ~= self.last_sound then
			msg.post(current_sound, "stop_sound")
		end
	end)

	self.last_sound = sound_url
end

function on_message(self, message_id, message, sender)
	if message_id == hash("character_moved") then
		sender.fragment = nil
		if self.current_character ~= sender then
			return
		end
		if self.current_balloon ~= SMALL_BALLOON and self.current_balloon ~= BIG_BALLOON then
			return
		end

		if self.current_balloon == SMALL_BALLOON then
			self.current_balloon = NO_ARROW_SMALL_BALLOON
		else
			self.current_balloon = NO_ARROW_BIG_BALLOON
		end
		local balloon = BALLOONS[self.current_balloon]
		msg.post("#sprite", "play_animation", {id = hash(balloon.image)})
	end
	
	if message_id == hash("show_text") then
		if not message.character then
			return
		end
		show_balloon(self, message.character, message.text, message.pos, message.no_arrow, message.skip, message.effects or {})
		
		self.last_message_id = self.last_message_id + 1
		local msg_id = self.last_message_id

		msg.post(message.character, message.event or "start_talking")
		timer.delay(message.delay or balloon_utils.get_text_duration(self.balloon_text), false, function(self, id)
			if msg_id == self.last_message_id then
				hide_balloon(self)
			end
			msg.post(message.character, "stop_talking")
		end)

		if message.sound then
			balloon_play_sound(self, message.sound)
		end
	end

	-- Manual balloon control
	if message_id == hash("hide") then
		hide_balloon(self)
	end

	if message_id == hash("show") then
		show_balloon(self, message.character, "", message.pos, message.no_arrow, false, message.effects or {})
	end

	if message_id == hash("add_text") then
		self.balloon_text = self.balloon_text..message.text
		if message.sound then
			balloon_play_sound(self, message.sound)
		end
	end	
end

local function skip_balloon(self)
	local total_duration = self.balloon_text:len() / LETTERS_PER_SECOND
	if self.show_elapsed < total_duration then
		self.show_elapsed = total_duration
	else
		event_manager:skip_event()
	end
end

function on_input(self, action_id, action)
	if self.balloon_visible and self.can_skip then
		if action_id == hash("click") and action.pressed then
			if inside_gameobject(self.current_skip, action.x, action.y, self.skip_offset[self.current_skip]) then
				skip_balloon(self)
			end
		end

		if action_id == hash("skip") and action.pressed then
			skip_balloon(self)
		end
	end
end