local inside_gameobject = require("main.inside_gameobject")
local all_items = require("main.game.item.items")
local is_open = false
local items_space = 60

function reorder_items(items)
	local start_pos = vmath.vector3(310,46,0.6)
	if not is_open then
		start_pos.y = -40
	end
	
	for i, item_name in ipairs(items) do
		local item = all_items.data[item_name]
		local pos = start_pos + vmath.vector3(items_space*(i-1), 0, 0)
		go.set_position(pos, item.go)
		item.position.x = pos.x
		item.position.y = pos.y
	end
end

function remove_item(items, item_name)
	for i, item in ipairs(items) do
		if item == item_name then
			table.remove(items, i)
			break
		end
	end
end

function toggle_inventory()
	is_open = not is_open
	if is_open then
		msg.post("/item_manager", "inventory_opened")
		go.animate(".", "position.y", go.PLAYBACK_ONCE_FORWARD, 124, go.EASING_LINEAR, 0.3)
	else
		msg.post("/item_manager", "inventory_closed")
		go.animate(".", "position.y", go.PLAYBACK_ONCE_FORWARD, 20, go.EASING_LINEAR, 0.3)
	end
end

function init(self)
	msg.post(".", "acquire_input_focus")
	self.items = {}
end

function on_input(self, action_id, action)
	if action_id == hash("click") and action.pressed then
		local offset = vmath.vector3(-140, -9, 0)
		if inside_gameobject("#inventory_handle", action.x, action.y, offset) or
		not inside_gameobject("#inventory_handle", action.x, action.y, offset) and not inside_gameobject("#inventory_area", action.x, action.y, vmath.vector3(0, -105, 0)) and is_open then
			toggle_inventory()
		end
	end
end

function on_message(self, message_id, message, sender)
	if message_id == hash("stop_game") then
		msg.post(".", "release_input_focus")
	end

	if message_id == hash("restart_game") then
		msg.post(".", "acquire_input_focus")
	end
	
	if message_id == hash("item_released") then
		if inside_gameobject("#inventory_area", message.x, message.y, vmath.vector3(0, -105, 0)) then
			if is_open then
				msg.post("/item_manager", "dropped_inside_inventory", {item_name=message.item_name})

				local exists = false
				
				for i, item in ipairs(self.items) do
					if item == message.item_name then
						exists = true
					end
				end

				if not exists then
					table.insert(self.items, message.item_name)
				end
				reorder_items(self.items)
			end
		else
			remove_item(self.items, message.item_name)
			msg.post("/item_manager", "dropped_outside_inventory", {item_name=message.item_name})
			if is_open then
				reorder_items(self.items)
				toggle_inventory()
			end
		end
	end

	if message_id == hash("remove_item") then
		remove_item(self.items, message.item_name)
		reorder_items(self.items)
	end

	if message_id == hash("item_drag") then
		if not is_open then
			if message.y <= 20 then
				toggle_inventory()
			end
		end
	end

	if message_id == hash("inv_close") then
		if is_open then
			toggle_inventory()
		end
	end

	-- New items were loaded from a save so update the inventory to match them
	if message_id == hash("refresh_inventory") then
		self.items = {}
		for key, item in pairs(all_items.data) do
			if item.in_inventory then
				table.insert(self.items, key)
			end
		end
	end
end