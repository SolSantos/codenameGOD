local goput = require "main.clickinput"
local items = require("main.game.item.items")
local mouse_x, mouse_y
local current_item = nil

function init(self)
	msg.post(".", "acquire_input_focus")
	self.item_factory = "/item_spawner#item"
	self.current_scenario = "menu"

	-- No item starts inside the inventory
	for name, item in pairs(items) do
		item.in_inventory = false
	end
end

local function handle_click(url, action_id, action, gameobject)
	if action_id == hash("click") then
		if action.pressed then
			current_item = items[gameobject]

			msg.post("/dialogue#dialogue", "show_text", {text=current_item.label, delay=3})
					
			if current_item.found == 0 and current_item.name ~="shoe1" and current_item.name ~="shoe2" and current_item.name ~="ticket" then
				current_item.found = 1 
					msg.post(
					"/dialogue#dialogue",
					"show_text",
					{text=current_item.text, delay=4, character="/randall", sound="#Randall_2"}
				)
			end
						
		elseif action.released then
			if current_item then
				
				go.set_position(vmath.vector3(mouse_x, mouse_y, 0), current_item.go)

				msg.post(
					"/inventory",
					"item_released",
					{x=mouse_x, y=mouse_y, item_name=gameobject, url=msg.url(current_item.go)}
				)

				current_item = nil
			end
		end
	end
end

function update_visible_items(self)
	for name, item in pairs(items) do
		if item.status == "show" and (item.in_inventory or item.scenario == self.current_scenario) then
			-- No need to reinitialize an already existing object
			if not item.go then
				local new_item = factory.create(
					self.item_factory,
					vmath.vector3(item.position.x, item.position.y, 0),
					nil,
					{image = hash(item.image)}
				)
				local url = msg.url(new_item)
				url.fragment = "sprite"
				goput.add(url, nil, handle_click, name)
				item.go = new_item
			end
		else
			if item.go then
				local url = msg.url(item.go)
				url.fragment = "sprite"
				goput.remove(url)
				go.delete(item.go)
				item.go = nil
			end
		end
	end
end

function final(self)
	for name, item in pairs(items) do
		if item.go then
			local url = msg.url(item.go)
			url.fragment = "sprite"
			goput.remove(url)
			go.delete(item.go)
			item.go = nil
		end
	end
end

function update(self, dt)
	if current_item then
		go.set_position(vmath.vector3(mouse_x, mouse_y, 0.6), current_item.go)
		current_item.position.x = mouse_x
		current_item.position.y = mouse_y
	end
end

function on_message(self, message_id, message, sender)
	if message_id == hash("stop_game") then
		msg.post(".", "release_input_focus")
	end

	if message_id == hash("restart_game") then
		msg.post(".", "acquire_input_focus")
	end
	
	if message_id == hash("changed_scenario") then
		self.current_scenario = message.name
		update_visible_items(self)
	end

	if message_id == hash("dropped_inside_inventory") then
		local dropped_item = items[message.item_name]
		if message.item_name == "ticket" and self.current_scenario == "room" then
			msg.post("/collections", "send_collection", {name = "ticket_found"})
		end
		dropped_item.in_inventory = true
		dropped_item.scenario = nil
	end

	if message_id == hash("dropped_outside_inventory") then
		local dropped_item = items[message.item_name]
		
		if (message.item_name == "shoe1" or  message.item_name == "shoe2") and self.current_scenario == "room" then	
			msg.post("/collections", "send_collection", {name = "shoe_found", params = {x = mouse_x, y = mouse_y, item_name = message.item_name}})
		end
		if message.item_name == "petrock" and self.current_scenario == "city_street_day" then	
			msg.post("/collections", "send_collection", {name = "pet_rock_drop", params = {x = mouse_x, y = mouse_y, item_name = message.item_name}})
		end
		dropped_item.in_inventory = false
		dropped_item.scenario = self.current_scenario
		go.set_position(vmath.vector3(mouse_x, mouse_y, 0), dropped_item.go)
	end

	if message_id == hash("inventory_opened") then
		for name, item in pairs(items) do
			if item.in_inventory then
				go.animate(item.go, "position.y", go.PLAYBACK_ONCE_FORWARD, 46, go.EASING_LINEAR, 0.3)
			end
		end
	end

	if message_id == hash("inventory_closed") then
		for name, item in pairs(items) do
			if item.in_inventory then
				go.animate(item.go, "position.y", go.PLAYBACK_ONCE_FORWARD, -40, go.EASING_LINEAR, 0.3)
			end
		end
	end
	
	if message_id == hash("destroy_item") then
		local item = items[message.text]
		if item.go then
			if current_item == item then
				current_item = nil
			end

			local item_url = msg.url(item.go)
			go.delete(item.go)
			item.status = "hide"
			item.scenario = "none"
			update_visible_items(self)
			

			if item.in_inventory then
				item.in_inventory = false
				msg.post("/inventory", "remove_item", {url=item_url})
			end
		end
	end

	if message_id == hash("show_coins") then
		local item = items["coins"]
		item.status = "show"
		item.position.x = message.x
		item.position.y = message.y
		update_visible_items(self)
		msg.post("/sound#6-drawer_opening", "play_sound")
	end
end

function on_input(self, action_id, action)
	if action_id == hash("click") then
		mouse_x = action.x
		mouse_y = action.y
		if current_item then
			msg.post("/inventory", "item_drag", {x=action.x, y=action.y})
		end
	end

	return goput.on_input(action_id, action, gameobject)
end
