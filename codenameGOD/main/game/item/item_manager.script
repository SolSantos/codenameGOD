local goput = require "main.clickinput"
local items = require("main.game.item.items")
local mouse_x, mouse_y
local current_item = nil

function init(self)
	msg.post(".", "acquire_input_focus")
	self.item_factory = "/item_spawner#item"
	self.current_scenario = "menu"

	-- No item starts inside the inventory
	for name, item in pairs(items) do
		item.in_inventory = false
	end
end

local function handle_click(url, action_id, action, gameobject)
	if action_id == hash("click") then
		if action.pressed then
			current_item = items[gameobject]
		elseif action.released then
			msg.post(
				"/dialogue#dialogue",
				"show_text",
				{text=current_item.text, delay=4, character="/randall"}
			)
			
			msg.post(
				"/inventory",
				"item_released",
				{x=mouse_x, y=mouse_y, item_name=gameobject}
			)
			current_item = nil
		end
	end
end

function update_visible_items(self)
	for name, item in pairs(items) do
		if item.in_inventory or item.scenario == self.current_scenario then
			-- No need to reinitialize an already existing object
			if not item.go then
				local new_item = factory.create(
					self.item_factory,
					vmath.vector3(item.position.x, item.position.y, 0.3),
					nil,
					{image = hash(item.image)}
				)

				local url = msg.url(new_item)
				url.fragment = "sprite"
				goput.add(url, nil, handle_click, name)
				item.go = new_item
			end
		else
			if item.go then
				local url = msg.url(item.go)
				url.fragment = "sprite"
				goput.remove(url)
				go.delete(item.go)
				item.go = nil
			end
		end
	end
end

function final(self)
	for name, item in pairs(items) do
		if item.go then
			local url = msg.url(item.go)
			url.fragment = "sprite"
			goput.remove(url)
			go.delete(item.go)
			item.go = nil
		end
	end
end

function update(self, dt)
	if current_item then
		go.set_position(vmath.vector3(mouse_x, mouse_y, 0), current_item.go)
		current_item.position.x = mouse_x
		current_item.position.y = mouse_y
	end
end

function on_message(self, message_id, message, sender)
	if message_id == hash("stop_game") then
		msg.post(".", "release_input_focus")
	end

	if message_id == hash("restart_game") then
		msg.post(".", "acquire_input_focus")
	end
	
	if message_id == hash("changed_scenario") then
		self.current_scenario = message.name
		update_visible_items(self)
	end

	if message_id == hash("dropped_inside_inventory") then
		local dropped_item = items[message.item_name]
		dropped_item.in_inventory = true
		dropped_item.scenario = nil
	end

	if message_id == hash("dropped_outside_inventory") then
		local dropped_item = items[message.item_name]
		dropped_item.in_inventory = false
		dropped_item.scenario = self.current_scenario
	end

	if message_id == hash("inventory_opened") then
		for name, item in pairs(items) do
			if item.in_inventory then
				go.animate(item.go, "position.y", go.PLAYBACK_ONCE_FORWARD, 40, go.EASING_LINEAR, 0.3)
			end
		end
	end

	if message_id == hash("inventory_closed") then
		for name, item in pairs(items) do
			if item.in_inventory then
				go.animate(item.go, "position.y", go.PLAYBACK_ONCE_FORWARD, -40, go.EASING_LINEAR, 0.3)
			end
		end
	end
end

function on_input(self, action_id, action)
	if action_id == hash("click") then
		mouse_x = action.x
		mouse_y = action.y
	end

	return goput.on_input(action_id, action, gameobject)
end
