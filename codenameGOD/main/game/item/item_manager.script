local goput = require "main.clickinput"
local items = require("main.game.item.items")
local context_data = require("main.context_data")
local utils = require("main.utils")
local mouse_x, mouse_y
local ITEM_Z = 0.10
local ITEM_DROPPED_Z = 0.25
local ITEM_INVENTORY_Z = 0.6

local current_item = nil

function init(self)
	msg.post(".", "acquire_input_focus")
	self.item_factory = "/item_spawner#item"
	self.current_scenario = "menu"

	-- No item starts inside the inventory
	for name, item in pairs(items.data) do
		item.in_inventory = false

		-- Register context menu for each item
		context_data["item_"..item.name] = {
			{text="Inspect", click=item.label}
		}
	end
end

local function handle_click(url, action_id, action, gameobject)
	if action_id == hash("click") then
		if action.pressed then
			local pressed_item = items.data[gameobject]
			if not pressed_item.movable then
				return
			end
			
			current_item = pressed_item
		elseif action.released then
			if current_item then
				go.set_position(vmath.vector3(mouse_x, mouse_y, ITEM_Z), current_item.go)
				current_item.position.x = mouse_x
				current_item.position.y = mouse_y
				
				msg.post(
					"/inventory",
					"item_released",
					{x=mouse_x, y=mouse_y, item_name=gameobject, url=msg.url(current_item.go)}
				)

				current_item = nil
			end
		end
	end

	if action_id == hash("right_click") and action.pressed then
		local pressed_item = items.data[gameobject]
		if not pressed_item.movable then
			return
		end
		
		local key = "item_"..pressed_item.name
		local url = msg.url(pressed_item.go)
		url.fragment = "sprite"
		msg.post(
			"/context_menu#context_menu", 
			"display_context_menu", 
			{x=action.x, y=action.y, context_key=key, area_url=url}
		)
	end
end

function update_visible_items(self)
	for name, item in pairs(items.data) do
		if item.status == "show" and (item.in_inventory or item.scenario == self.current_scenario) then
			-- No need to reinitialize an already existing object
			if not item.go then
				local pos = vmath.vector3(item.position.x, item.position.y, ITEM_Z)
				if item.in_inventory then
					pos.z = ITEM_INVENTORY_Z
				end
				local new_item = factory.create(self.item_factory, pos, nil, {image = hash(item.image)})
				local url = msg.url(new_item)
				url.fragment = "sprite"
				goput.add(url, nil, handle_click, name)
				item.go = new_item
			end
		else
			if item.go then
				local url = msg.url(item.go)
				url.fragment = "sprite"
				goput.remove(url)
				go.delete(item.go)
				item.go = nil
			end
		end
	end
end

function final(self)
	for name, item in pairs(items.data) do
		if item.go then
			local url = msg.url(item.go)
			url.fragment = "sprite"
			goput.remove(url)
			go.delete(item.go)
			item.go = nil
		end
	end
end

function update(self, dt)
	if current_item then
		local item_x = clamp(mouse_x, 0, WIDTH)
		local item_y = clamp(mouse_y, 0, HEIGHT)
		go.set_position(vmath.vector3(item_x, item_y, ITEM_INVENTORY_Z), current_item.go)
		current_item.position.x = item_x
		current_item.position.y = item_y
	end
end

function on_message(self, message_id, message, sender)
	if message_id == hash("stop_game") then
		msg.post(".", "release_input_focus")
	end

	if message_id == hash("restart_game") then
		msg.post(".", "acquire_input_focus")
	end
	
	if message_id == hash("changed_scenario") then
		self.current_scenario = message.name
		update_visible_items(self)
	end

	if message_id == hash("dropped_inside_inventory") then
		local dropped_item = items.data[message.item_name]
		dropped_item.in_inventory = true
		dropped_item.scenario = nil
		msg.post("/collections", "send_collection", {name = "item_dropped_in_inventory", params={item_name=message.item_name, x=mouse_x, y=mouse_y}})
	end

	if message_id == hash("dropped_outside_inventory") then
		local dropped_item = items.data[message.item_name]
		dropped_item.in_inventory = false
		dropped_item.scenario = self.current_scenario
		go.set_position(vmath.vector3(mouse_x, mouse_y, ITEM_DROPPED_Z), dropped_item.go)
		msg.post("/collections", "send_collection", {name = "item_dropped_in_scene", params={item_name=message.item_name, x=mouse_x, y=mouse_y}})
	end

	if message_id == hash("inventory_opened") then
		for name, item in pairs(items.data) do
			if item.in_inventory then
				go.animate(item.go, "position.y", go.PLAYBACK_ONCE_FORWARD, 46, go.EASING_LINEAR, 0.3)
				item.position.y = 46
			end
		end
	end
	
	if message_id == hash("inventory_closed") then
		for name, item in pairs(items.data) do
			if item.in_inventory then
				go.animate(item.go, "position.y", go.PLAYBACK_ONCE_FORWARD, -40, go.EASING_LINEAR, 0.3)
				item.position.y = -40
			end
		end
	end
	
	if message_id == hash("destroy_item") then
		local item = items.data[message.text]
		if item.go then
			if current_item == item then
				current_item = nil
			end

			item.status = "hide"
			item.scenario = "none"
			update_visible_items(self)
			
			if item.in_inventory then
				item.in_inventory = false
				msg.post("/inventory", "remove_item", {item_name=item.name})
			end
		end
	end

	if message_id == hash("update_visible_items") then
		update_visible_items(self)
	end

	if message_id == hash("character_moved") then
		-- Make items go bellow characters after someone moves
		for name, item in pairs(items.data) do
			local pos = go.get_position(item.go)
			if pos.z == ITEM_DROPPED_Z then
				go.set_position(vmath.vector3(pos.x, pos.y , ITEM_Z), item.go)
			end
		end
	end
end

function on_input(self, action_id, action)
	if action_id == hash("click") then
		mouse_x = action.x
		mouse_y = action.y
		if current_item then
			msg.post("/inventory", "item_drag", {x=action.x, y=action.y})
			msg.post("/collections","send_collection", {name = "item_dragged", params={item_name=current_item.name, x=mouse_x, y=mouse_y}})
		end
	end

	return goput.on_input(action_id, action)
end
