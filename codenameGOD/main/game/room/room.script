function init(self)
	msg.post(".", "acquire_input_focus")
end

function final(self)
	-- Add finalization code here
	-- Remove this function if not needed
end

function update(self, dt)
	-- Add update code here
	-- Remove this function if not needed
end

function on_message(self, message_id, message, sender)
	if message_id == hash("go_outside") then
		msg.post("/collections#main", "load_screen", {
			name = "house_front", 
			randall_position = vmath.vector3(300, 180, 0)
		})
	elseif message_id == hash("run_sequence_1") then
		local pos = vmath.vector3(0,-20,0)
		local rot = vmath.quat_rotation_z(90)
		go.animate("randall", "rotation.z", go.PLAYBACK_ONCE_FORWARD, 0, go.EASING_LINEAR, 1)
		go.animate("randall", "position.y", go.PLAYBACK_ONCE_FORWARD, 300, go.EASING_LINEAR, 1)
		go.animate("randall", "position.x", go.PLAYBACK_ONCE_FORWARD, 520, go.EASING_LINEAR, 1)
		--local co = coroutine.create(sequence_1())
		--run_sequence(co)
		msg.post(".", "done_seq_1")
		
	end
end

function on_input(self, action_id, action)
	--só para testar a trocar de cenário
	if action_id == hash("a") then
		msg.post(".", "go_outside")
	elseif action_id == hash("s") then
		msg.post(".", "run_sequence_1")
	end
end

local function sequence_1(self)
	coroutine.yield(2)  -- waits 1 sec
	
	coroutine.yield(1)  -- waits 1 sec
	
	return 0
end

--[[
local function run_sequence(seq)
	local status, wait_seconds = coroutine.resume(seq, self)
	if status then
		go.animate("#", "wait", go.PLAYBACK_ONCE_FORWARD, 1, go.EASING_LINEAR, wait_seconds, 0, function ()
			run_sequence(seq)
		end)
	end
end
--]]


function on_reload(self)
	-- Add reload-handling code here
	-- Remove this function if not needed
end