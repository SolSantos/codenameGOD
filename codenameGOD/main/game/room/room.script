local game_state = require("main.game_state")
local items = require("main.game.item.items")
local cutscenes = require("main.game.room.cutscenes")
local update_context_entries = require("main.game.room.context_data")
local ouija_mode = require("main.game.room.ouija_mode")
local randall_utils = require("main.game.randall.utils")
local balloon_utils = require("main.game.dialogue.utils")
local hints = require("main.hints")

local MOVE_AROUND_TIME = 10
local DOOR_HINT_DELAY = 4

local item_strings = {
	[1] = {
		text = "Would you look at that, Aries isn't aligned with Venus today either, Helena. Oops!",
		position = {x=210, y=200}
	},
	[2] = {
		text = "I don't care what anyone says, the books are much\nbetter than the TV Series.",
		position = {x=220, y=260}
	},
	[3] = {
		text = "Oh no...Did I wet the bed again...?",
		position = {x=450, y=300}
	},
	[4] = {
		text = "I wonder if they'll still be making these in 30 years... Nah, no way.",
		position = {x=800, y=280}
	},
	[5] = {
		text = "I love stepping on my NES\ncontroller when no one is watching!",
		position = {x=600, y=200}
	},
	[6] = {
		text = "A weird Pepsi commercial is on screen.",
		position = {x=800, y=200}
	},
	[7] = {
		text = "My record? 3.41236 seconds. No biggie.",
		position = {x=780, y=265}
	},
	[8] = {
		text = "Hello, Mr.Cyberman. How many galaxy-wide Xi-Class cataclysms are we preventing today?\nOh? In the middle of the L76 cluster? Preposterous.",
		position = {x=390, y=260}
	},
	[9] = {
		text = "For some reason, I think Heman will be famous for entirely different reasons in the future.\nCall it a nerd's intuition.",
		position = {x=855, y=253}
	}
	
}

local refresh_window = function(self)
	if self.window_closed then
		if game_state.data.day_state == "day" then
			msg.post(self.window_url, "play_animation", {id = hash("room_window1")})
		else
			msg.post(self.window_url, "play_animation", {id = hash("room_window2")})
		end
	else
		if game_state.data.day_state == "day" then
			msg.post(self.window_url, "play_animation", {id = hash("room_window3")})
		else
			msg.post(self.window_url, "play_animation", {id = hash("room_window4")})
		end
	end
end

function update(self, dt)
	if self.ouija_in_use then
		ouija_mode.update(self, dt)
		return
	end

	if self.show_hints then
		hints.update(self, dt)
	end

	-- Puzzle solved (puzzle_solved so it only plays once)
	if not game_state.data.allowed_leave and items.data.ticket.in_inventory and game_state.data.both_shoes and not self.puzzle_sound then
		self.puzzle_sound = true
		game_state.data.allowed_leave = true
		msg.post("/sound#2-puzzle_solve", "play_sound")
		event_manager:register_event(2, function(_, id)
			cutscenes.ready_for_tournament(self)
		end)
	end
end

function init(self)
	self.refresh_window = refresh_window
	
	msg.post(".", "acquire_input_focus")

	self.show_hints = false
	self.hint_count = 0
	self.ouija_in_use = false
	self.cutscenes = cutscenes
	self.window_closed = true
	
	self.inv_arrow_url = msg.url("inventory_arrow")
	msg.post(self.inv_arrow_url, "disable")
	self.room_url = msg.url()
	self.door_sound_url = msg.url("sound#8-door_knob")
	self.drawer_url = msg.url("drawer#sprite")
	self.window_url = msg.url("window#sprite")
	self.bro_url = msg.url("randall_bro")
	self.nintendo_url = msg.url("nintendo")
	self.telescope_url = msg.url("telescope")
	self.tv_url = msg.url("tv")
	self.tv_sound_url = msg.url("sound#16-tv_news")
	self.window_sound_url = msg.url("sound#18-open_window")
	self.zipper_sound_url = msg.url("sound#19-zipper")
	self.books_context_url = msg.url("books_clickable")
	
	self.candle_url = msg.url("candle")
	self.ouija_url = msg.url("ouija")
	self.big_ouija_url = msg.url("big_ouija")
	self.big_ouija_hitbox_url = msg.url("big_ouija#sprite")
	self.randall_arms_url = msg.url("randall_arms")
	self.arms_hitbox_url = msg.url("randall_arms#hit_box")
	
	msg.post(self.candle_url, "disable")
	msg.post(self.ouija_url, "disable")
	msg.post(self.big_ouija_url, "disable")
	
	self.puzzle_sound = false
	self.drawer_open = false
	self.sign_drawer = false
	self.sign_tv = false
	self.sign_window = false
	self.sign_trousers = false

	self.shoe_count = 0
	self.divine_signs = 0
		
	-- Run the intro cutscene
	if game_state.data.stage == game_state.stages.PROLOG then
		if not game_state.data.intro_done then
			cutscenes.intro(self)
		elseif game_state.data.comming_from_bullies then
			if not STARTING_FROM_CHECKPOINT then
				msg.post("/collections#main", "checkpoint")
			end
			
			msg.post("/randall", "set_state", {state=RANDALL_STATE.NORMAL})
			cutscenes.back_from_bullies(self)
		else
			msg.post(".", "moved")
		end
	elseif STARTING_FROM_CHECKPOINT and game_state.data.stage == game_state.stages.BECKY_PARTY then
		msg.post("/cutscene#cutscene", "cutscene_start")
		cutscenes.wakeup_at_night(self)
	end

	msg.post("sound#ambiance", "play_sound")
	
	update_context_entries(self)
	local ticket_moved = items.data.ticket.found == 1
	if ticket_moved then
		go.set_position(vmath.vector3(252,212,0.1), "books")
		go.set_rotation(vmath.quat_rotation_z(math.rad(-90)), "books")
	else
		items.data.ticket.movable = false
	end

	refresh_window(self)
	
	STARTING_FROM_CHECKPOINT = false
end

function final(self)
	msg.post("sound#ambiance", "stop_sound")
end

function on_input(self, action_id, action)
	if self.ouija_in_use then
		ouija_mode.on_input(self, action_id, action)
	end
end

function on_message(self, message_id, message, sender)
	-- Flavor text for Randall moving around alone
	if message_id == hash("flavor") then
		-- Randall is free to move around unless he's waiting for a sign from god
		if game_state.data.in_gameplay and not game_state.data.awaiting_signal then
			local r = math.random(1, #item_strings)
			msg.post("/randall", "go_to", {
				pos=vmath.vector3(item_strings[r].position.x, item_strings[r].position.y, 0.2)
			})
			msg.post("/balloon", "show_text", {text=item_strings[r].text, character="/randall", sound="#Randall_3"})
		end

	-- Hint text for when the player doesn't do anything for a while	
	elseif message_id == hash("hint") then

		-- Triggers when the player doesn't have both shoes or doesn't have the ticket
		if game_state.data.in_gameplay and not game_state.data.both_shoes then

			if items.data.ticket.in_inventory then
				msg.post("/balloon", "show_text", {delay=5, text = "Boy, I sure wish my shoes \nmagically flew towards me!", character = "/randall", sound="#Randall_4"})
			else
				msg.post("/balloon", "show_text", {delay=6, text = "Pretty sure I was using my ticket as a\nbookmark last night... I need to find it.", character = "/randall", sound="#Randall_3"})
			end

		-- Triggers when the player can leave the house but is yet to do so
		elseif items.data.ticket.in_inventory and game_state.data.both_shoes then
			msg.post("/balloon", "show_text", {text = "I really need to go now.\n I'm gonna be late!", character = "/randall", sound="#Randall_1"})
			
		-- Triggers when the player is waiting for a sign from God
		elseif game_state.data.awaiting_signal and game_state.data.in_gameplay then
			balloon_utils.show_one_of({
				character="/randall", sound="#Randall_1", messages={
					{text="Please, anything at all...?"},
					{text="Literally anything will do, I'm kinda desperate here."},
					{text = "A thunder smiting the tree outside, perhaps?"}
				}
			})
		end
		msg.post(".", "moved")
	end
	if message_id == hash("moved") then
		hints.reset(self)
	end

	-- A divine message is triggered
	if message_id == hash("divine_sign") then
		if self.divine_signs == 1 then
			msg.post("/balloon", "show_text", {text = "Holy cow! It's really happening! Ok. One more totally unique interaction to make sure it's not just some wild coincidence.", character = "/randall", sound="#Randall_panic2"})
		elseif self.divine_signs == 2 then
			game_state.data.awaiting_signal = false
			cutscenes.ouija_cutscene(self)
		end
	end
	if message_id == hash("show_ticket") then
		go.animate("books", "position", go.PLAYBACK_ONCE_FORWARD, vmath.vector3(252,212,0.1), go.EASING_LINEAR, 0.4)
		go.animate("books", "rotation", go.PLAYBACK_ONCE_FORWARD, vmath.quat_rotation_z(math.rad(-90)), go.EASING_LINEAR, 0.4, 0, function(self, url, property)
			msg.post("sound#7-books_falling", "play_sound")
			local ticket_not_touched = items.data.ticket.found == 0
			if ticket_not_touched then
				msg.post("/balloon", "show_text", {delay = 4, text="There's the ticket! \nNow, where to put it...", character = "/randall", sound="#Randall_4"})
				timer.delay(4, false, function(self, id)
					msg.post("/balloon", "show_text", {delay = 2, text="Oh.", character = "/randall"})
				end)
			end
		end)
	end

	if message_id == hash("inventory_arrow") then
		if not game_state.data.first_item_picked then
			game_state.data.first_item_picked = true

			timer.delay(1, false, function(self, id)
				msg.post(self.inv_arrow_url, "enable")
			end)
			timer.delay(4, false, function(self, id)
				msg.post(self.inv_arrow_url, "disable")
			end)
		end
	end
	
	if message_id == hash("item_dropped_in_inventory") then
		if message.item_name == "ticket" then
			msg.post("/balloon", "show_text", {delay=3.5, text="All safe for later!", character = "/randall", sound="#Randall_5"})
		end
	end
	
	if message_id == hash("item_dropped_in_scene") then
		if randall_utils.was_hit(message.x, message.y) then
			if (message.item_name == "shoe1" or message.item_name == "shoe2") and self.shoe_count < 2 and not game_state.data.both_shoes then	
				self.shoe_count = self.shoe_count + 1
				msg.post("/item_manager#item_manager", "destroy_item",{text = message.item_name})
				if self.shoe_count == 1 then
					msg.post("/randall", "set_state", {state=RANDALL_STATE.ONE_SHOE})
					msg.post("/balloon", "show_text", {text="That's one shoe!", character = "/randall", sound="#Randall_short1"})
				end
				if self.shoe_count == 2 then
					msg.post("/randall", "set_state", {state=RANDALL_STATE.NORMAL})
					msg.post("/balloon", "show_text", {text="Aaaand ready to go!", character = "/randall", sound="#Randall_short2"})
					game_state.data.both_shoes = true
				end
			else
				randall_utils.default_item_ignore()
			end
			
			msg.post(".", "moved")
		end
	end

	if message_id == hash("item_dragged") then
		if message.item_name ~= "shoe1" and message.item_name ~= "shoe2" then
			msg.post(".", "inventory_arrow")
		end
	end
end
